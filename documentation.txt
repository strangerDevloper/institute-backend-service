====================================
SCHOOL APPLICATION BACKEND DOCUMENTATION
====================================

Table of Contents
----------------
1. System Overview
2. Technical Architecture
3. Domain Documentation
4. API Documentation
5. Database Documentation
6. Authentication & Authorization
7. Development Guide
8. Deployment Guide
9. Troubleshooting
10. Error Handling
11. Best Practices

1. SYSTEM OVERVIEW
-----------------

1.1 Introduction
---------------
Purpose: Backend service for managing educational institutions
Target Users: School administrators, teachers, and staff
Key Features: 
- Multi-tenant architecture
- Institute management
- Feature flag system
- Role-based access control

1.2 System Architecture
----------------------
Technology Stack:
- Node.js
- TypeScript
- TypeORM
- PostgreSQL
- Express.js

2. TECHNICAL ARCHITECTURE
------------------------

2.1 Project Structure
--------------------
institue-backend-service/
├── src/
│   ├── api/              # API routes and controllers
│   ├── entity/           # TypeORM entities
│   ├── middleware/       # Custom middleware
│   ├── config/          # Configuration files
│   ├── utils/           # Utility functions
│   │   ├── errors/      # Error handling
│   │   └── transaction.ts # Transaction management
│   └── utils/           # Utility functions
├── migrations/          # Database migrations
└── tests/              # Test files

2.2 Core Technologies
--------------------
- Node.js (Latest LTS version)
- TypeScript 5.x
- PostgreSQL 15.x
- TypeORM 0.3.x
- Express.js 4.x

2.3 Transaction Management
-------------------------
The application implements a controller-level transaction management system to ensure data consistency across multiple service operations.

Transaction Utility:
------------------
Location: src/utils/transaction.ts
Purpose: Provides a reusable transaction wrapper for database operations
Features:
- Type-safe transaction execution
- Automatic rollback on errors
- Resource cleanup
- Support for multiple service calls

Usage Example:
```typescript
await executeInTransaction(dataSource, async (queryRunner) => {
    const result1 = await service1.operation1(queryRunner);
    const result2 = await service2.operation2(queryRunner);
    return { result1, result2 };
});
```

Service Layer:
-------------
Services are designed to be transaction-aware:
- Accept optional QueryRunner parameter
- Use provided transaction context or create new one
- Focus on business logic without transaction management

Example Service Method:
```typescript
async create(dto: CreateDto, userId: string, queryRunner?: QueryRunner) {
    const manager = queryRunner?.manager || this.repository.manager;
    return await manager.save(entity);
}
```

Controller Layer:
---------------
Controllers manage transactions and coordinate service calls:
- Initiate and manage transactions
- Pass transaction context to services
- Handle transaction rollback on errors
- Coordinate multiple service operations

Example Controller Method:
```typescript
async complexOperation() {
    return await executeInTransaction(dataSource, async (queryRunner) => {
        const result1 = await service1.operation(queryRunner);
        const result2 = await service2.operation(queryRunner);
        return { result1, result2 };
    });
}
```

3. DOMAIN DOCUMENTATION
----------------------

3.1 Institute Domain
-------------------

Entity Model:
------------
interface Institute {
    id: string;                  // UUID primary key
    name: string;                // Institute name (unique)
    code: string;                // Institute code (unique)
    type: InstituteType;         // Type of institution
    address: string;             // Physical address
    latitude?: number;           // Geographic latitude (10,8)
    longitude?: number;          // Geographic longitude (11,8)
    phone?: string;              // Contact number
    email: string;               // Official email (unique)
    website?: string;            // Institute website URL
    description?: string;        // Detailed description
    contactPerson?: string;      // Primary contact person
    isActive: boolean;           // Active status flag
    timezone?: string;           // Operating timezone
    currency?: string;           // Default currency
    createdAt: Date;            // Creation timestamp
    updatedAt: Date;            // Last update timestamp
    createdBy?: string;         // Creator's UUID
    updatedBy?: string;         // Last updater's UUID
}

Institute Types:
---------------
enum InstituteType {
    SCHOOL = 'school',
    COLLEGE = 'college',
    UNIVERSITY = 'university',
    OTHER = 'other'
}

4. API DOCUMENTATION
-------------------

4.1 API Standards
----------------
Base URL: /api
Version: v1
Authentication: Bearer token
Response Format: JSON
Error Format: { message: string, error?: any }

4.2 Institute API Endpoints
--------------------------

Public Endpoints:
---------------
1. List Institutes
   GET /api/institutes
   Query Parameters:
   - type: InstituteType (optional)
   - isActive: boolean (optional)
   - search: string (optional)
   - page: number (default: 1)
   - limit: number (default: 10)
   - sortBy: string (default: 'createdAt')
   - sortOrder: 'ASC' | 'DESC' (default: 'DESC')

2. Get Institute by ID
   GET /api/institutes/:id

Protected Endpoints:
------------------
3. Create Institute
   POST /api/institutes
   Body: CreateInstituteDto
   Auth: Required
   
4. Update Institute
   PUT /api/institutes/:id
   Body: UpdateInstituteDto
   Auth: Required

5. Delete Institute
   DELETE /api/institutes/:id
   Auth: Required

6. Soft Delete Institute
   PATCH /api/institutes/:id/deactivate
   Auth: Required

5. DATABASE DOCUMENTATION
------------------------

5.1 Institute Schema
-------------------
CREATE TABLE "institutes" (
    "id" UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    "institute_name" VARCHAR(100) NOT NULL UNIQUE,
    "institute_code" VARCHAR(100) NOT NULL UNIQUE,
    "institute_type" VARCHAR(50) NOT NULL,
    "address" VARCHAR(255) NOT NULL,
    "latitude" DECIMAL(10,8),
    "longitude" DECIMAL(11,8),
    "phone_number" VARCHAR(50),
    "email_address" VARCHAR(100) NOT NULL UNIQUE,
    "website_url" VARCHAR(255),
    "description" TEXT,
    "contact_person" VARCHAR(50),
    "is_active" BOOLEAN NOT NULL DEFAULT true,
    "timezone" VARCHAR(100),
    "currency" VARCHAR(50),
    "created_at" TIMESTAMP NOT NULL DEFAULT now(),
    "updated_at" TIMESTAMP NOT NULL DEFAULT now(),
    "created_by" UUID,
    "updated_by" UUID
);

Indexes:
--------
CREATE INDEX idx_institute_type ON institutes(institute_type);
CREATE INDEX idx_is_active ON institutes(is_active);

6. AUTHENTICATION & AUTHORIZATION
-------------------------------

6.1 Authentication
-----------------
- JWT-based authentication
- Token format: Bearer <token>
- Token expiration: 24 hours
- Refresh token mechanism

6.2 Feature Flags
----------------
- instituteManagement: Controls institute-related features
- Implementation: Middleware-based
- Configuration: Environment variables

7. DEVELOPMENT GUIDE
-------------------

7.1 Setup Instructions
---------------------
1. Clone repository
2. Install dependencies: pnpm install
3. Configure environment variables
4. Run migrations: pnpm migration:run
5. Start development server: pnpm dev

7.2 Environment Variables
------------------------
Required:
- DATABASE_URL
- JWT_SECRET
- PORT
- NODE_ENV

Optional:
- LOG_LEVEL
- FEATURE_FLAGS
- CORS_ORIGIN

8. DEPLOYMENT GUIDE
------------------

8.1 Production Setup
-------------------
1. Build TypeScript: pnpm build
2. Set production environment variables
3. Run migrations: pnpm migration:run
4. Start server: pnpm start

8.2 Health Monitoring
--------------------
Endpoint: /api/healthCheck
Response: { message: 'Server is running' }

9. TROUBLESHOOTING
-----------------

9.1 Common Issues
----------------
1. Database Connection:
   - Check DATABASE_URL
   - Verify PostgreSQL service
   - Check network connectivity

2. Authentication:
   - Verify JWT_SECRET
   - Check token expiration
   - Validate token format

3. Feature Flags:
   - Check environment configuration
   - Verify flag names
   - Check middleware order

USAGE EXAMPLES
-------------

1. Create Institute:
-------------------
const newInstitute = await instituteService.create({
    name: "Example University",
    code: "EXU001",
    type: InstituteType.UNIVERSITY,
    address: "123 Education St",
    email: "admin@exu.edu",
    timezone: "UTC",
    currency: "USD"
}, userId);

2. Update Institute:
-------------------
const updatedInstitute = await instituteService.update(instituteId, {
    website: "https://www.exu.edu",
    contactPerson: "John Doe",
    phone: "+1-234-567-8900"
}, userId);

3. Search Institutes:
--------------------
const results = await instituteService.findAll(
    { 
        type: InstituteType.UNIVERSITY,
        isActive: true,
        search: "Example"
    },
    {
        page: 1,
        limit: 10,
        sortBy: "name",
        sortOrder: "ASC"
    }
);

ERROR HANDLING
-------------

10.1 Error Types
---------------
- AppError: Base error class
- ValidationError: Input validation errors (400)
- NotFoundError: Resource not found (404)
- DuplicateError: Unique constraint violations (409)
- DatabaseError: Database operation failures (500)
- UnauthorizedError: Authentication failures (401)
- ForbiddenError: Authorization failures (403)

10.2 Error Handler Middleware
---------------------------
Location: src/middleware/error.middleware.ts
Features:
- Centralized error handling
- Consistent error response format
- Development/Production mode support
- Stack trace inclusion in development
- TypeORM error translation
- Validation error handling

Error Response Format:
```typescript
{
    status: 'error' | 'fail',
    message: string,
    errors?: any,
    stack?: string // development only
}
```

10.3 Transaction Error Handling
-----------------------------
- Automatic rollback on errors
- Error propagation to global handler
- Resource cleanup in finally block
- Proper error classification
- Consistent error responses

Example Error Handling:
```typescript
try {
    await executeInTransaction(dataSource, async (queryRunner) => {
        // operations
    });
} catch (error) {
    // Error is already handled by transaction utility
    next(error);
}
```

11. BEST PRACTICES
-----------------

11.1 Transaction Management
-------------------------
DO:
- Use transactions for multiple database operations
- Keep transactions at controller level
- Pass QueryRunner to services
- Handle rollbacks automatically
- Clean up resources properly

DON'T:
- Manage transactions in services
- Mix transactional and non-transactional operations
- Forget to release QueryRunner
- Swallow transaction errors

11.2 Error Handling
-----------------
DO:
- Use appropriate error types
- Let global handler manage responses
- Include meaningful error messages
- Clean up resources in finally blocks
- Log errors appropriately

DON'T:
- Return error responses directly from services
- Mix error handling styles
- Expose sensitive error details
- Ignore transaction errors

MAINTENANCE NOTES
----------------
1. Regular Updates:
   - Update dependencies monthly
   - Review security vulnerabilities
   - Update documentation

2. Monitoring:
   - Check server logs daily
   - Monitor API response times
   - Track error rates

3. Backup:
   - Daily database backups
   - Store backups securely
   - Test restore procedures

4. Transaction Monitoring:
   - Monitor transaction duration
   - Track rollback frequency
   - Watch for deadlocks
   - Monitor connection pool usage

END OF DOCUMENTATION
------------------- 